import { AtpAgent } from "npm:@atproto/api@0.15.14";

// 1. Load environment variables
function getRequiredEnv(key: string): string {
  const value = Deno.env.get(key);
  if (!value) {
    console.error(`Missing required environment variable: ${key}`);
    Deno.exit(1);
  }
  return value;
}

const PDS_URL = getRequiredEnv("PDS_URL");
const DID = getRequiredEnv("DID");
const RKEY = getRequiredEnv("RKEY");
const APP_PASSWORD = getRequiredEnv("APP_PASSWORD");
const MARKDOWN_PATH = getRequiredEnv("MARKDOWN_PATH");
const HANDLE = getRequiredEnv("HANDLE");

// 2. Read markdown file
let content: string;
try {
  content = await Deno.readTextFile(MARKDOWN_PATH);
} catch (error) {
  console.error("Failed to read markdown file:", error);
  Deno.exit(1);
}

// 3. Authenticate using AtpAgent (from @atproto/api)
const agent = new AtpAgent({ service: PDS_URL });

try {
  await agent.login({
    identifier: HANDLE,
    password: APP_PASSWORD,
  });
} catch (error) {
  console.error("Login failed:", error);
  Deno.exit(1);
}

// 4. Fetch the existing record
let record;
try {
  const getRes = await agent.com.atproto.repo.getRecord({
    repo: DID,
    collection: "com.whtwnd.blog.entry",
    rkey: RKEY,
  });
  record = getRes.data.value;
} catch (error) {
  console.error("Failed to fetch record:", error);
  Deno.exit(1);
}

// 5. Update the content field with autogenerated footer
const currentDateTime = new Date().toISOString();
const footer = `\n\n---\n*Last updated: ${currentDateTime}*`;
record.content = content + footer;

// 6. Update the record on the PDS
try {
  await agent.com.atproto.repo.putRecord({
    repo: DID,
    collection: "com.whtwnd.blog.entry",
    rkey: RKEY,
    record,
  });
  console.log("Record updated successfully!");
} catch (error) {
  console.error("Failed to update record:", error);
  Deno.exit(1);
}
